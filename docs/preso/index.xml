<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Presos on Datadog Training Site</title>
    <link>https://datadog.github.io/summit-training-session/preso/index.xml</link>
    <description>Recent content in Presos on Datadog Training Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Oct 2016 08:46:22 -0400</lastBuildDate>
    <atom:link href="https://datadog.github.io/summit-training-session/preso/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Monitoring 101 - Getting Started</title>
      <link>https://datadog.github.io/summit-training-session/preso/monitoring101/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/monitoring101/</guid>
      <description>#Monitoring 101
Note: This is a speaker note
---
&lt;!-- .slide: data-background-image=&#34;../../images/monitoring101/rainondash.png&#34; --&gt;
--
&lt;!-- .slide: data-background-image=&#34;../../images/monitoring101/splat.png&#34; --&gt;
---
# Collecting data is cheap
&lt;!-- .slide: data-transition=&#34;fade-out&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Collecting data is cheap &lt;!-- .element: style=&#34;color: grey;&#34; --&gt;
#**Not having it when you need it is expensive**
---
&lt;!-- .slide: data-background-image=&#34;../../images/monitoring101/blogseries.png&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/workresourceevents-1.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/workresourceevents-2.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/workresourceevents-3.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
![](../../images/monitoring101/pageandinvestigate.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
![](../../images/monitoring101/recurse-1.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/recurse-2.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/recurse-3.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;none&#34; --&gt;
![](../../images/monitoring101/recurse-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
# Examples of Metrics &lt;hr&gt;
## Web Server
--
#Work Metrics
##Page Requests per Second
##Successful Requests
--
#Resource Metrics
##CPU Utilization
##Queue Length
---
# Tags All the Way Down
![](../../images/monitoring101/awstags.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
![](../../images/monitoring101/tagexample.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
![](../../images/monitoring101/tagcube.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 79%&#34; --&gt;
--
# Asking Better Questions
![](../../images/monitoring101/betterq1.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Asking Better Questions
![](../../images/monitoring101/betterq2.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;

---
# Metric Graphs 101
## Timeseries Graphs
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Line Graphs
![](../../images/monitoring101/linegraphs.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
Note: Use Line Graphs for the same metric reported by diff scopes to spot outliers at a glance

for tracking single metrics to see evolution over time

related metrics with same units to see correlations 

metrics with clear acceptable domain

--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Stacked Area Graphs
![](../../images/monitoring101/stackedareagraphs.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;

Note: Same metric from different scopes, to check both sum and contribution of each

sum complementary metrics sharing the same unit

If the metrics can&#39;t be added sensibly, don&#39;t use this
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Bar Graphs
![](../../images/monitoring101/bargraphs.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;

Note: use this for sparse metrics to convey values without jumpy or misleading interpolation

metrics that represent a count and not a gauge
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Heat Maps
![](../../images/monitoring101/heatmap.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;

Note: single metrics reported by a large number of groups to see trends and variations across a group

But if there are few sources, not so useful

---
# Metric Graphs 101
## Summary Graphs
Visualizations that flatten a span
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Aggregation Across Time
![](../../images/monitoring101/timeaggregation.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Aggregation Across Space
![](../../images/monitoring101/spaceaggregation.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 80%&#34; --&gt;
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Single Value Summary
![](../../images/monitoring101/singlevalue.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 70%&#34; --&gt;

Note: work metrics from a given system to make them more visible

critical resource metrics to provide overview at a glance

error metrics to draw attention

computed metric changes compared to previous value
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Top Lists
![](../../images/monitoring101/toplists.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 70%&#34; --&gt;

Note: work or resource metrics from different hosts or groups to spot outliers or overconsumers

custom metrics to see kpis in a easy to read format
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Change Graphs
![](../../images/monitoring101/changegraphs.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 50%&#34; --&gt;

Note: cyclic metrics that rise and fall seasonally, to separate trends from periodic baselines

high level infra metrics to spot large scale trends
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Host Maps
![](../../images/monitoring101/hostmaps.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 70%&#34; --&gt;

Note: resource utilization to spot overloaded components at a glance

id resource misallocation

id degraded hosts

correlation in a single graph or related metrics
--
&lt;!-- .slide: data-transition=&#34;fade-in&#34; --&gt;
#Distributions
![](../../images/monitoring101/distributions.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 70%&#34; --&gt;

Note: single metric to see general health or variations across members of a group
</description>
    </item>
    
    <item>
      <title>Building Great Dashboards</title>
      <link>https://datadog.github.io/summit-training-session/preso/buildinggreatdashboards/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/buildinggreatdashboards/</guid>
      <description># Building Great Dashboards
---
# The Environment
![](../../images/buildinggreatdashboards/environment.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; height: 100%&#34; --&gt;
---
# Remember the Monitoring Framework
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
# HA Proxy Metrics

| Metric | Unit | Description |
|--------|------|-------------|
| haproxy.backend.bytes.in_rate | bytes/second | Rate of bytes in on backend hosts.|
| haproxy.backend.bytes.out_rate | bytes/second | Rate of bytes out on backend hosts.
| haproxy.backend.connect.time | milliseconds | Average connect time over the last 1024 requests. |
| haproxy.backend.denied.req_rate | requests/second | Number of requests denied due to security concerns. |
| haproxy.backend.denied.resp_rate | responses/second | Number of responses denied due to security concerns. |
| haproxy.backend.errors.con_rate | errors/second | Rate of requests that encountered an error trying to connect to a backend server. |
| haproxy.backend.errors.resp_rate  | errors/second | Rate of responses aborted due to error. |
| haproxy.backend.queue.current | requests | Number of requests without an assigned backend. |
| haproxy.backend.queue.time | milliseconds | Average queue time over the last 1024 requests. |

--
# HA Proxy Metrics cnt&#39;d

| Metric | Unit | Description |
|--------|------|-------------|
| haproxy.backend.response.1xx | responses | Backend HTTP responses with 1xx code. |
| haproxy.backend.response.2xx | responses | Backend HTTP responses with 2xx code. |
| haproxy.backend.response.3xx | responses | Backend HTTP responses with 3xx code. |
| haproxy.backend.response.4xx | responses | Backend HTTP responses with 4xx code. |
| haproxy.backend.response.5xx | responses | Backend HTTP responses with 5xx code. |
| haproxy.backend.response.other | responses | Backend HTTP responses with other code (protocol error). |
| haproxy.backend.response.time| milliseconds | Average response time over the last 1024 requests (0 for TCP). |
| haproxy.backend.session.current| connections | Number of active backend sessions. |
| haproxy.backend.session.limit| connections | Configured backend session limit. |
| haproxy.backend.session.pct | percent | Percentage of sessions in use (backend.session.current/backend.session.limit * 100). |
| haproxy.backend.session.rate | connections/| second  Number of backend sessions created per second. |
--
# HA Proxy Metrics cnt&#39;d

| Metric | Unit | Description |
|--------|------|-------------|
| haproxy.backend.session.time | milliseconds | Average total session time over the last 1024 requests. |
| haproxy.backend.warnings.redis_rate | errors/second | Number of times a connection to a server was retried. |
| haproxy.backend.warnings.retr_rate  | errors/second | Number of times a request was redispatched to another server. |
| haproxy.backend_hosts | hosts | Number of backend hosts. |
| haproxy.count_per_status | hosts | Number of hosts by status (UP/DOWN/NOLB/MAINT). |
| haproxy.frontend.bytes.in_rate  | bytes/second |  Rate of bytes in on frontend hosts. |
| haproxy.frontend.bytes.out_rate | bytes/second |  Rate of bytes out on frontend hosts. |
| haproxy.frontend.denied.req_rate  | requests/second | Number of requests denied due to security concerns. |
| haproxy.frontend.denied.resp_rate | responses/second | Number of responses denied due to security concerns. |
| haproxy.frontend.errors.req_rate  | errors/second | Rate of request errors. |

--
# HA Proxy Metrics cnt&#39;d

| Metric | Unit | Description |
|--------|------|-------------|
| haproxy.frontend.requests.rate  | requests/second | Number of HTTP requests per second. |
| haproxy.frontend.response.1xx | responses | Frontend HTTP responses with 1xx code. |
| haproxy.frontend.response.2xx | responses | Frontend HTTP responses with 2xx code. |
| haproxy.frontend.response.3xx | responses | Frontend HTTP responses with 3xx code. |
| haproxy.frontend.response.4xx | responses | Frontend HTTP responses with 4xx code. |
| haproxy.frontend.response.5xx | responses | Frontend HTTP responses with 5xx code. |
| haproxy.frontend.response.other | responses | Frontend HTTP responses with other code (protocol error). |
| haproxy.frontend.session.current | connections | Number of active frontend sessions. |
| haproxy.frontend.session.limit | connections | Configured backend session limit. |
| haproxy.frontend.session.pct |  percent | Percentage of sessions in use (frontend.session.current/frontend.session.limit * 100). |
| haproxy.frontend.session.rate| connections/second |  Number of frontend sessions created per second. |
--
# What do you think the work metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all again](../../notes/buildinggreatdashboards/)
--
# What do you think the resource metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all again](../../notes/buildinggreatdashboards/)
--
# Front End Work Metrics
|Category|Metric|
|----|---|
|**Throughput**| `haproxy.frontend.requests.rate`|
|**Errors**|`haproxy.frontend.errors.req_rate`|

# Front End Resource Metrics
|Category|Metric|
|----|---|
|**Utilization**| `haproxy.frontend.session.rate`|
|**Utilization**| `haproxy.frontend.session.pct`|
|**Utilization**| `haproxy.frontend.bytes.in_rate`|
|**Utilization**| `haproxy.frontend.bytes.out_rate`|

https://www.datadoghq.com/blog/monitoring-haproxy-performance-metrics/#Frontend
--
# Back End Work Metrics
|Category|Metric|
|----|---|
|**Throughput**| `haproxy.backend.response.time `|
|**Errors**|`haproxy.backend.errors.con_rate`|
|**Errors**|`haproxy.backend.denied.resp_rate`|

# Back End Resource Metrics
|Category|Metric|
|----|---|
|**Saturation**| `haproxy.backend.queue.current`|
|**Saturation**| `haproxy.backend.queue.time `|
|**Availability**| `haproxy.backend.warnings.retr_rate`|
|**Availability**| `haproxy.backend.warnings.redis_rate`|

https://www.datadoghq.com/blog/monitoring-haproxy-performance-metrics/#Backend
---
# Two Types Of Dashboards
![](../../images/buildinggreatdashboards/2dashboards.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Two Sets of Widgets
###Timeboards
![](../../images/buildinggreatdashboards/timeboardwidgets.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 50%&#34; --&gt;
###Screenboards
![](../../images/buildinggreatdashboards/screenboardwidgets.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Two Different Goals
![](../../images/buildinggreatdashboards/dashboards.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
# Building a Timeboard
1.  Create a Timeboard
1.  Drag Timeseries to the canvas
  1.  Select the metric
  1.  Set the Scope (host, etc)
  1.  Space Aggregation (avg, max, min, sum; by x)
  1.  Time Aggregation (optional)(rollup)
  1.  Functions

---
# Hands-On
## [Building your first Dashboard](../../handson/buildinggreatdashboards/#first-dashboard)

---
#Apache Metrics

|Name | Units |Description |
|----|-----|----|
|apache.net.bytes | bytes |The total number of bytes served. |
|apache.net.bytes_per_s | bytes/second | The number of bytes served per second. |
|apache.net.hits | requests |  The total number of requests performed. |
|apache.net.request_per_s | requests/second | The number of requests performed per second. |
|apache.performance.busy_workers | threads | The number of workers serving requests. |
|apache.performance.cpu_load | percent | The percent of CPU used. |
|apache.performance.idle_workers | threads | The number of idle workers. |
|apache.performance.uptime | seconds | The amount of time the server has been running. |
--
# What do you think the work metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all again](../../notes/buildinggreatdashboards/)
--
# What do you think the resource metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all again](../../notes/buildinggreatdashboards/)
--
# Apache Metrics
|Category|Metric|
|----|---|
|Work:**Throughput**| `apache.net.hits `|
|Work:**Performance**|`apache.net.request_per_s`|
|Resource:**Saturation**|`apache.performance.busy_workers`|
|Resource:**Availability**|`apache.performance.uptime`|
---
# Hands-On
## [Troubleshoot Apache](../../handson/buildinggreatdashboards/#apache)
---
# Introduction to the Notebook
--
# What are Notebooks for?
## Saving time specific information
### Metric Graphs
### Markdown Text
## Living documentation for your infrastructure
## Sharing organizational knowledge
--
# Using the Notebook
![Using the notebook](https://cl.ly/3n3R3g3U3Q1W/Screen%20Recording%202016-10-23%20at%2002.11%20PM.gif)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Hands-On
## [Building a Notebook](../../handson/buildinggreatdashboards/#notebooks)
---
#MySQL Metrics
--
#MySQL Metrics
| Metric | Description|
|------|--------| 
| &lt;strong&gt;mysql.galera.wsrep_cluster_size&lt;/strong&gt;&lt;br&gt;(gauge) | The current number of nodes in the Galera cluster.&lt;br&gt;&lt;em&gt;shown as node&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.buffer_pool_free&lt;/strong&gt;&lt;br&gt;(gauge) | The number of free pages in the InnoDB Buffer Pool.&lt;br&gt;&lt;em&gt;shown as page&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.buffer_pool_total&lt;/strong&gt;&lt;br&gt;(gauge) | The total number of pages in the InnoDB Buffer Pool.&lt;br&gt;&lt;em&gt;shown as page&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.buffer_pool_used&lt;/strong&gt;&lt;br&gt;(gauge) | The number of used pages in the InnoDB Buffer Pool.&lt;br&gt;&lt;em&gt;shown as page&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.buffer_pool_utilization&lt;/strong&gt;&lt;br&gt;(gauge) | The utilization of the InnoDB Buffer Pool.&lt;br&gt;&lt;em&gt;shown as fraction&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.current_row_locks&lt;/strong&gt;&lt;br&gt;(gauge) | The number of current row locks.&lt;br&gt;&lt;em&gt;shown as lock&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.data_reads&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of data reads.&lt;br&gt;&lt;em&gt;shown as read/second&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.data_writes&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of data writes.&lt;br&gt;&lt;em&gt;shown as write/second&lt;/em&gt; |
--
#MySQL Metrics
| Metric | Description|
|------|--------|
| &lt;strong&gt;mysql.innodb.mutex_os_waits&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of mutex OS waits.&lt;br&gt;&lt;em&gt;shown as event/second&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.mutex_spin_rounds&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of mutex spin rounds.&lt;br&gt;&lt;em&gt;shown as event/second&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.mutex_spin_waits&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of mutex spin waits.&lt;br&gt;&lt;em&gt;shown as event/second&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.os_log_fsyncs&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of fsync writes to the log file.&lt;br&gt;&lt;em&gt;shown as write/second&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.row_lock_time&lt;/strong&gt;&lt;br&gt;(gauge) | Fraction of time spent (ms/s) acquring row locks.&lt;br&gt;&lt;em&gt;shown as fraction&lt;/em&gt; |
| &lt;strong&gt;mysql.innodb.row_lock_waits&lt;/strong&gt;&lt;br&gt;(gauge) | The number of times per second a row lock had to be waited for.&lt;br&gt;&lt;em&gt;shown as event/second&lt;/em&gt; |
--
#MySQL Metrics
| Metric | Description|
|------|--------|
| &lt;strong&gt;mysql.net.connections&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of connections to the server.&lt;br&gt;&lt;em&gt;shown as connection/second&lt;/em&gt; |
| &lt;strong&gt;mysql.net.max_connections&lt;/strong&gt;&lt;br&gt;(gauge) | The maximum number of connections that have been in use simultaneously since the server started.&lt;br&gt;&lt;em&gt;shown as connection&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_delete&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of delete statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_delete_multi&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of delete-multi statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_insert&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of insert statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_insert_select&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of insert-select statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_replace_select&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of replace-select statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
--
#MySQL Metrics
| Metric | Description|
|------|--------|
| &lt;strong&gt;mysql.performance.com_select&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of select statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_update&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of update statements.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.com_update_multi&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of update-multi.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.created_tmp_disk_tables&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of internal on-disk temporary tables created by second by the server while executing statements.&lt;br&gt;&lt;em&gt;shown as table/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.created_tmp_files&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of temporary files created by second.&lt;br&gt;&lt;em&gt;shown as file/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.created_tmp_tables&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of internal temporary tables created by second by the server while executing statements.&lt;br&gt;&lt;em&gt;shown as table/second&lt;/em&gt; |
--
#MySQL Metrics
| Metric | Description|
|------|--------|
| &lt;strong&gt;mysql.performance.kernel_time&lt;/strong&gt;&lt;br&gt;(gauge) | Percentage of CPU time spent in kernel space by MySQL.&lt;br&gt;&lt;em&gt;shown as percent&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.key_cache_utilization&lt;/strong&gt;&lt;br&gt;(gauge) | The key cache utilization ratio.&lt;br&gt;&lt;em&gt;shown as fraction&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.open_files&lt;/strong&gt;&lt;br&gt;(gauge) | The number of open files.&lt;br&gt;&lt;em&gt;shown as file&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.open_tables&lt;/strong&gt;&lt;br&gt;(gauge) | The number of of tables that are open.&lt;br&gt;&lt;em&gt;shown as table&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.qcache_hits&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of query cache hits.&lt;br&gt;&lt;em&gt;shown as hit/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.questions&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of statements executed by the server.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.slow_queries&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of slow queries.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.table_locks_waited&lt;/strong&gt;&lt;br&gt;(gauge) | The total number of times that a request for a table lock could not be granted immediately and a wait was needed.&lt;em&gt;&lt;/em&gt; |
--
#MySQL Metrics
| Metric | Description|
|------|--------|
| &lt;strong&gt;mysql.performance.threads_connected&lt;/strong&gt;&lt;br&gt;(gauge) | The number of currently open connections.&lt;br&gt;&lt;em&gt;shown as connection&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.threads_running&lt;/strong&gt;&lt;br&gt;(gauge) | The number of threads that are not sleeping.&lt;br&gt;&lt;em&gt;shown as thread&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.user_time&lt;/strong&gt;&lt;br&gt;(gauge) | Percentage of CPU time spent in user space by MySQL.&lt;br&gt;&lt;em&gt;shown as percent&lt;/em&gt; |
| &lt;strong&gt;mysql.replication.seconds_behind_master&lt;/strong&gt;&lt;br&gt;(gauge) | The lag in seconds between the master and the slave.&lt;br&gt;&lt;em&gt;shown as second&lt;/em&gt; |
| &lt;strong&gt;mysql.replication.slave_running&lt;/strong&gt;&lt;br&gt;(gauge) | A boolean showing if this server is a replication slave that is connected to a replication master.&lt;em&gt;&lt;/em&gt; |
| &lt;strong&gt;mysql.performance.queries&lt;/strong&gt;&lt;br&gt;(gauge) | The rate of queries.&lt;br&gt;&lt;em&gt;shown as query/second&lt;/em&gt; |

--
# What do you think the work metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all](../../notes/buildinggreatdashboards/)
--
# What do you think the resource metrics should be?
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
[Review the notes for this section to see them all](../../notes/buildinggreatdashboards/)
--
#Some Key Mysql Metrics
| Category | Metric |
|------|-----|
|Work:**Throughput**|`mysql.performance.questions`|
|Work:**Throughput**|`mysql.performance.com_select`|
|Resource:**Utilization**| `mysql.performance.threads_connected`|
|Resource:**Utilization**| `mysql.performance.threads_running`|
|Resource:**Error**| `mysql.performance.aborted_connects`|
|Resource:**Utilization**| `mysql.performance.threads_connected`|

See https://www.datadoghq.com/blog/monitoring-mysql-performance-metrics/ for more

--
# Hands-On
## [MySQL and Combined Dashboards](../../handson/buildinggreatdashboards/#mysql)
</description>
    </item>
    
    <item>
      <title>Monitoring Math</title>
      <link>https://datadog.github.io/summit-training-session/preso/monitoringmath/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/monitoringmath/</guid>
      <description># Monitoring Math
Getting more out of your graphs
---
#Metric Aggregation
--
# Timeseries Data
* Metrics are stored as timeseries based on combinations of the metric name and tag combinations
* Queries require an aggregation function (sum, min, max, avg) to aggregate over timeseries matching the query
* Aggregation is applied at each point on the graph, bringing multiple timeseries value into one point on the graph
--
# Aggregation Example
* Start with a basic query “sum:system.disk.used{host:oracle-xe}”
* Disk metrics are tagged by disk using the “device” tag, with an individual timeseries created on each host for every device reported

![](../../images/monitoringmath/aggexample.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Aggregation Example

* Using “by {device}” break the graph down to show one stacked are per disk
* Sum from previous graph is now broken down by individual disks making up the previous aggregate

![](../../images/monitoringmath/aggexample2.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
---
#Functions
--
# Function Types
* Arithmetic
* Interpolation
* Timeshift
* Rate
* Count
* Smoothing
* Time Aggregation
* Ranking
* Algorithm
---
# Arithmetic
## Absolute Value
* Always displays the absolute value of the metric.

## Log2/Log10
* The occasional spike may skew the scale of a graph. Log will smooth out the spike while not eliminating them.

## Cumulative Sum / Integral
* Adds each value shown on the graph cumulatively.
---
# Interpolation - .fill()

* Not meant to fill in empty spaces, but to align multiple series together
* Helpful for aggregation and arithmetic across multiple sources
* Available options include linear interpolation or inserting 0’s or the most recent value
* More on this in our KBs: http://dtdg.co/kb-fill
---
# Timeshift
## Helpful for comparing metrics with previously reported values
--
# hour_before()
![](../../images/monitoringmath/hour_before.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# day_before()
![](../../images/monitoringmath/day_before.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# week_before()
![](../../images/monitoringmath/week_before.png)
--
# month_before()
![](../../images/monitoringmath/month_before.png)
---
# Rate
## Compare metric values with their previous value
--
# per_second()
Compare the metric with the previous value, returning difference in value divided by the difference in time
![](../../images/monitoringmath/rate_per_second.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;

--
# per_minute()
Compare the metric with the previous value, returning difference in value divided by the difference in time

![](../../images/monitoringmath/rate_per_minute.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
Note: 60 * the per_second() value
--
# per_hour()  Rate
Compare the metric with the previous value, returning difference in value divided by the difference in time
![](../../images/monitoringmath/rate_per_hour.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;

Note: 3600 * the per_second() value
--
# dt()
![](../../images/monitoringmath/dt.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
Note: Time in seconds between the current and previous points
--
# diff()
![](../../images/monitoringmath/diff.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
Note: The difference in value between the current and previous points
--
# derivative()
![](../../images/monitoringmath/derivative.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;

Note: 1st order derivative function applied to the graph: diff() / dt()
---
# Count
## Keep track of the number of values reported in your graphs
--
# count_nonzero()
![](../../images/monitoringmath/count_nonzero.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
Note: Current track of all non-zero values graphed at a given moment in time
--
# count_not_null()
![](../../images/monitoringmath/count_not_null.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
Note: Current track of all non-null values graphed at a given moment in time
---
# Smoothing
## Even out the values on your graph
--
# ewma_3()
![](../../images/monitoringmath/ewma_3.png)
Note: Exponentially weighted moving average spanning 3 points (previous, current, next)
--
# ewma_5()
![](../../images/monitoringmath/ewma_5.png)
Note: Exponentially weighted moving average spanning 5 points
--
# ewma_10()
![](../../images/monitoringmath/ewma_10.png)
Note: Exponentially weighted moving average spanning 10 points
--
# ewma_20()
![](../../images/monitoringmath/ewma_20.png)
Note: Exponentially weighted moving average spanning 20 points
--
# median_3()
![](../../images/monitoringmath/median_3.png)
Note: Median value spanning 3 points (median of the previous, current, and next point)
--
# median_5()
![](../../images/monitoringmath/median_5.png)
Note: Median value spanning 5 points
--
# median_7()
![](../../images/monitoringmath/median_7.png)
Note: Median value spanning 7 points
--
# median_9()
![](../../images/monitoringmath/median_9.png)
Note: Median value spanning 9 points
---
# Time Aggregation
## Smooth out your graphs by aggregating timeseries data
--
# .rollup($method, $time)
* Apply aggregation $method to multiple values over $time in seconds
* Available methods: sum, min, max, avg
* Allows overriding the default rollup function used for smoothing graphs over larger timeframes
* Various methods available can allow preservation of spikes/dips in graphs
* More on our default rollups and the rollup function’s use in our KBs: http://dtdg.co/zoomsmooth
---
# Ranking
## Avoid clutter by viewing only the most relevant timeseries
--
# top()
Avoid clutter by viewing only the most relevant timeseries
![](../../images/monitoringmath/top.png)
Note: * Select the top series responsive to a given query, according to a provided ranking method
* Parameters for the top function include
  * metric query itself
  * the number of series you’d like returned
  * a ranking function (one of &#39;max&#39;, &#39;min&#39;, &#39;last&#39;, &#39;l2norm&#39;, or &#39;area&#39;)
  * sort order (either &#39;desc&#39; for descending order or &#39;asc&#39; for ascending order)
--
# top_offset()
Avoid clutter by viewing only the most relevant timeseries

![](../../images/monitoringmath/topoffset.png)

Note: Similar to top(), except with an additional offset parameter, which controls where in the ordered sequence of series the graphing starts.

For example, an offset of 2 would start graphing at the number 3 ranked series, according to the chosen ranking metric.
---
# Algorithm
## Analyze your metrics compared to concurrent or previous metric data
--
#outliers()
* Compare timeseries values with each other
* Highlights individual timeseries based on ones that deviate too far from the norm at a given moment in time
* More on the available DBSCAN and MAD functions used here: http://dtdg.co/outlierdetect
--
#anomalies()
* Compares historic metric data
* Allows comparison of the current value with norms calculated across previous timeframes
* Can alert on anomalous spikes/dips in metric values based on deviation from this norm

</description>
    </item>
    
    <item>
      <title>The Right Alerts</title>
      <link>https://datadog.github.io/summit-training-session/preso/therightalerts/</link>
      <pubDate>Mon, 17 Oct 2016 08:46:22 -0400</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/therightalerts/</guid>
      <description># Creating the Right Alerts
---
# Two Rules for Effective Alerting
1.  Alert liberally; page judiciously
1.  Page on symptoms, rather than causes
--
# What does that mean?
* Create lots of alerts for everything.
* Alerts become the living history of your infrastructure
* But only notify people about the **Work Metrics** going awry
---
# Paged Alerts Should Always Be Easily Actionable
## Alerts should be:
* Grokkable at 3AM, drunk, with one eye closed
* Filled with all the info you need
  *     Including who to wake up if you have trouble
* Consumable by the non-experts
---
# Levels of Alerting Urgency
## Alerts as Records (low severity)
Use to document the system. Helpful when trying to troubleshoot later.
## Alerts as Notifications (moderate severity)
These are things that require intervention, but not right away
## Alerts as Pages (high severity)
Wake the right people up and address it immediately!
---
# How to Determine the Right Level of Urgency?
## Is the issue real?
Don&#39;t notify on things that shouldn&#39;t be important, like:
* Test environments
* System down during planned upgrade
--
# How to Determine the Right Level of Urgency?
## Does the issue require attention?
* If you can automate a response, do it
* The costs of calling someone away from work/sleep/personal time is significant. Avoid if you can.
* If it&#39;s **real** and **require&#39;s attention**, notify and let the engineer prioritize.
--
# How to Determine the Right Level of Urgency?
## Is the issue urgent?
* IIF the issue is **real** AND **require&#39;s attention** AND is **urgent**, generate a page.
---
# Page on Symptoms
## **Work metrics** not Resource metrics
![](../../images/monitoring101/workresourceevents-4.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
&lt;br&gt;&lt;br&gt;&lt;br&gt;
# ...except when its an early warning...
---
# Early Warning Signs
Also page on the early warning signs that come before really bad things:
* If you are about to run out of disk
* If you are about to hit a quota limit
* etc.
---
# How To Build an Alert
## https://app.datadoghq.com/monitors#/create
![](../../images/therightalerts/createmonitor.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Eight Types

* **Host** - notify on the status of the agent heartbeat
* **Metric** - metrics collected by agent or API can trigger alerts
* **Integration** - same as metrics above, applied to specific integrations
* **Process** - check if a process is running or not
* **Network Service** - check if a network endpoint is active or not
* **Custom Check** - run a custom script and alert on the results
* **Event** - trigger alerts if the quantity of events goes over a threshold
* **Outlier** - detect when a member of a group is different than the rest
--
# Define the Metric
![](../../images/therightalerts/definemetric.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Set the conditions
![](../../images/therightalerts/setconditions.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Preview What the Monitor Sees
![](../../images/therightalerts/monitorview.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Enter a Message
![](../../images/therightalerts/say.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Make it Dynamic
![](../../images/therightalerts/makeitdynamic.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Choose Who To Notify
![](../../images/therightalerts/notify.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
---
# View the Triggered Monitors
https://app.datadoghq.com/monitors#triggered
![](../../images/therightalerts/triggered.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Click on One
![](../../images/therightalerts/click.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;
--
# Schedule Downtime
![](../../images/therightalerts/downtime.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width : 100%&#34; --&gt;




</description>
    </item>
    
    <item>
      <title>Building a Custom Agent Check</title>
      <link>https://datadog.github.io/summit-training-session/preso/customagentcheck/</link>
      <pubDate>Mon, 17 Oct 2016 08:47:05 -0400</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/customagentcheck/</guid>
      <description># Building a Custom Agent Check

---
# Agent Architecture

## Four components
### Collector
### Forwarder
### DogstatsD
### SupervisorD
--
# The Collector
## Runs every 15 seconds
## Runs each enabled integration check
## Also runs any custom agent checks
--
# The Forwarder
## Forwards collected metrics to Datadog
## Stores metrics collected in case of network disruption
--
# DogStatsD
## Python implementation of StatsD (Etsy)
## Implements tags
--
# SupervisorD
## Runs master process
## Forks all subprocesses as the user **dd-agent**
---
# Running Checks
## Every 15 seconds Collector collects
## Official integrations
## Custom Checks
--
# Custom Checks

## Checks have both a Python check and YAML configuration
--
# Custom Checks
## Checks in `/etc/dd-agent/checks.d`
## Configurations in `/etc/dd-agent/conf.d`

 **On Linux, see http://docs.datadoghq.com/guides/agent_checks/#directory for other platforms.*
 
--
# Example Configuration

```
init_config:
  min_collection_interval: 20
  key1: val1
  key2: val2
instances:
  - username: jon_smith
    password: 1234

  - username: jane_smith
    password: 5678
```
--
# Checks
## Inherit from **AgentCheck**
## Require a `check(self, instance)` method 
--
# Simple Check 
```
from checks import AgentCheck
class HelloCheck(AgentCheck):
    def check(self, instance):
        self.gauge(&#39;hello.world&#39;, 1)
```
---
# Datadog Metric Types
## Gauge
## Rate
## Count
--
# Gauge
* Record any value
* If not updated, uses previous value
--
# Rate
* Count per unit of time
--
# Count
* Quantity

</description>
    </item>
    
    <item>
      <title>Monitoring Docker</title>
      <link>https://datadog.github.io/summit-training-session/preso/monitordocker/</link>
      <pubDate>Mon, 17 Oct 2016 08:47:14 -0400</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/monitordocker/</guid>
      <description># Monitoring Docker
---
# Why Use Docker

* Rapid application deployment
* Portability across machines
* Version control and component reuse
* Sharing
* Lightweight footprint and minimal overhead
* Simplified maintenance

*Source: Redhat Docs*
--
# Docker Architecture
![](../../images/monitordocker/architecture.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Docker Hub
![](../../images/monitordocker/hub1.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Docker Hub
![](../../images/monitordocker/hub2.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
--
# Docker Hub
![](../../images/monitordocker/hub3.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
# Docker commands
```
docker run ...
docker ps 
docker logs ...
docker stop ...
docker rm ...
docker network ...
```
---
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
## **docker run**: Run a container
--
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
## **-d**: As a daemon
--
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
##  **--name dd-agent**: Name the container `dd-agent`
--
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
## **-v &amp;lt;host directory&gt;:&amp;lt;docker directory&gt;** mount the host directory in this directory on the container
--
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
## **-e API_KEY=&amp;lt;api_key&gt;** Pass a string as an environment variable
--
# Understanding the Datadog Agent Docker command

```
docker run -d --name dd-agent \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  -v /proc/:/host/proc/:ro \
  -v /sys/fs/cgroup/:/host/sys/fs/cgroup:ro \
  -e API_KEY=&lt;api_key&gt; \
  datadog/docker-dd-agent:latest
```
&lt;br&gt;
## **org/imagename:label** Find an image on DockerHub created by this org. Use the version of the image with this label.
---
# Ways of running Docker

## `docker run` is fun for this session but doesn&#39;t scale well

## `docker-compose` orchestrates multiple containers
## `swarm` deals with docker clusters
## kubernetes, ec2, and other solutions exist
</description>
    </item>
    
    <item>
      <title>Custom Metrics</title>
      <link>https://datadog.github.io/summit-training-session/preso/custommetrics/</link>
      <pubDate>Mon, 17 Oct 2016 08:47:47 -0400</pubDate>
      
      <guid>https://datadog.github.io/summit-training-session/preso/custommetrics/</guid>
      <description># Custom Metrics
---
# Two Primary Methods to get Metrics into Datadog From Your Applications

## DogStatsd
## Restful API

--

# DogStatsD

## Python implementation of statsD metric aggregation daemon from Etsy
## Enables Tags 
## Sends metrics to the Forwarder 

--

# API

## Sends metrics directly to app.datadoghq.com

--
# Which To Use?

## Using the API, every metric is a separate network transmission
* If there are many metrics being sent, this is a lot of overhead

## DogStatsD 
* batches the metrics
* generates a histogram
* submits that on each flush of the forwarder 
---
# Many libraries to choose from
##http://docs.datadoghq.com/libraries/
![](../../images/custommetrics/libraries.png)&lt;!-- .element: style=&#34;background: none; box-shadow: none; width: 100%&#34; --&gt;
---
# Python

## https://github.com/DataDog/datadogpy
## http://datadogpy.readthedocs.io/en/latest/
--
# Using DogStatsD

    from datadog import initialize, statsd

    options = {
      &#39;statsd_host&#39;: &lt;ipaddress of agent&gt;, 
      &#39;statsd_port&#39;: 8125
    }
    statsd.gauge(metricname, value, tags)

</description>
    </item>
    
  </channel>
</rss>